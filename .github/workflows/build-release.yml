name: Build and Release RIS_app

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write  # autorise la cr√©ation de release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .
          pip install ruff pytest

      - name: Run lint
        run: ruff check .

      - name: Run tests
        run: pytest

      - name: Resolve version
        id: resolve_version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
            RELEASE_TAG="${GITHUB_REF_NAME}"
            IS_TAG="true"
          else
            # Fallback : lit __version__ depuis ris_app/__init__.py
            VERSION=$(python - <<'PY'
from pathlib import Path
import re
p = Path("ris_app/__init__.py").read_text(encoding="utf-8")
m = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", p)
print(m.group(1) if m else "0.0.0")
PY
)
            RELEASE_TAG="v${VERSION}"
            IS_TAG="false"
          fi

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "release_tag=${RELEASE_TAG}" >> "$GITHUB_OUTPUT"
          echo "is_tag=${IS_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build zips (core & plugins) + checksums + catalog
        shell: bash
        env:
          VERSION: ${{ steps.resolve_version.outputs.version }}
          RELEASE_TAG: ${{ steps.resolve_version.outputs.release_tag }}
          IS_TAG: ${{ steps.resolve_version.outputs.is_tag }}
          REPO_SLUG: KaRyuuuuuu/RIS_app
        run: |
          set -euo pipefail
          mkdir -p artifacts
          echo "üì¶ Zippage du core..."
          zip -r "artifacts/ris_app_core_${VERSION}.zip" ris_app -x "ris_app/plugins/*" >/dev/null
          sha256sum "artifacts/ris_app_core_${VERSION}.zip" | awk '{print $1}' > "artifacts/ris_app_core_${VERSION}.sha256"

          echo "üì¶ Zippage des plugins..."
          PLUGINS_JSON="[]"
          for d in ris_app/plugins/*; do
            [ -d "$d" ] || continue
            if [ ! -f "$d/plugin.json" ]; then
              echo "‚ö†Ô∏è  $d n‚Äôa pas de plugin.json, ignor√©"
              continue
            fi
            read -r SLUG PVERSION <<< $(python - <<'PY'
import json, sys, os
p = sys.argv[1]
with open(os.path.join(p, "plugin.json"), "r", encoding="utf-8") as f:
    j = json.load(f)
print(j.get("slug", "unknown"), j.get("version", "0.0.0"))
PY
"$d")

            ZIPNAME="plugin_${SLUG}_${PVERSION}.zip"
            (cd "$d" && zip -r "../../artifacts/${ZIPNAME}" . >/dev/null)
            SHA=$(sha256sum "artifacts/${ZIPNAME}" | awk '{print $1}')
            echo "$SHA" > "artifacts/${ZIPNAME}.sha256"

            if [ "$IS_TAG" = "true" ]; then
              ZIP_URL="https://github.com/${REPO_SLUG}/releases/download/${RELEASE_TAG}/${ZIPNAME}"
            else
              ZIP_URL="${ZIPNAME}"
            fi

            PLUGINS_JSON=$(python - <<'PY'
import json, sys
arr = json.loads(sys.argv[1])
slug, ver, url, sha = sys.argv[2:6]
arr.append({"slug": slug, "version": ver, "zip_url": url, "sha256": sha})
print(json.dumps(arr))
PY
"$PLUGINS_JSON" "$SLUG" "$PVERSION" "$ZIP_URL" "$SHA")
          done

          CORE_ZIP="ris_app_core_${VERSION}.zip"
          if [ "$IS_TAG" = "true" ]; then
            CORE_URL="https://github.com/${REPO_SLUG}/releases/download/${RELEASE_TAG}/${CORE_ZIP}"
          else
            CORE_URL="${CORE_ZIP}"
          fi
          CORE_SHA=$(cat "artifacts/ris_app_core_${VERSION}.sha256")

          echo "üßæ G√©n√©ration du catalog.json..."
          python - <<'PY'
import json, os
from pathlib import Path
version = os.environ["VERSION"]
repo = os.environ.get("REPO_SLUG","")
is_tag = os.environ.get("IS_TAG","false") == "true"
release_tag = os.environ.get("RELEASE_TAG","")
core_zip = f"ris_app_core_{version}.zip"
core_url = f"https://github.com/{repo}/releases/download/{release_tag}/{core_zip}" if is_tag else core_zip
core_sha = Path(f"artifacts/ris_app_core_{version}.sha256").read_text().strip()
plugins = json.loads(os.environ.get("PLUGINS_JSON", "[]"))
catalog = {
  "core": {"version": version, "zip_url": core_url, "sha256": core_sha},
  "plugins": plugins
}
Path("artifacts/catalog.json").write_text(json.dumps(catalog, indent=2), encoding="utf-8")
Path("ris_app/data").mkdir(parents=True, exist_ok=True)
Path("ris_app/data/catalog.json").write_text(json.dumps(catalog, indent=2), encoding="utf-8")
PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ris_app_build
          path: artifacts

      - name: Publish release (tagged builds)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*.zip
            artifacts/*.sha256
            artifacts/catalog.json
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
